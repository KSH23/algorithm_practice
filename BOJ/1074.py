# 1074. Z


N, row, col = map(int, input().split())

root_list = [[0, 1], [2, 3]]    # 시초가 되는 리스트

# 찾고자 하는 최종 답은 시초가 되는 리스트 원소에 
# 배열을 검사하며 추가되는 일정한 값을 더한 값
ans = 0    

# 2차원 배열을 4개의 작은 배열로 쪼개 검사하며 점차 1/2씩 작아지는 배열을 검사함
# 좌측상단에 놓여지는 배열을 제외하면 시계방향으로 특정 값의 배수만큼 숫자가 증가
# 이 특정 값을 ans에 추가하고 각 좌표의 위치도 작아지는 배열에 맞춰 이동
# 이때 특정 값은 4 X 2^((N-2) X 2)
while N > 1:
    if row < 2 ** (N-1) <= col:    # 우측상단
        ans += 4 * 2 ** ((N - 2) * 2)
        col -= 2 ** (N-1)    

    elif col < 2 ** (N - 1) <= row:    # 좌측하단
        ans += 4 * 2 ** ((N - 2) * 2) * 2
        row -= 2 ** (N - 1)

    elif row >= 2 ** (N - 1) and col >= 2 ** (N - 1):    # 우측하단
        ans += 4 * 2 ** ((N - 2) * 2) * 3
        row -= 2 ** (N - 1)
        col -= 2 ** (N - 1)

    N -= 1

ans += root_list[row][col]    # 시초가 되는 원소 추가
print(ans)